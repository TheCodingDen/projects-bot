// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VoteType {
  UP
  DOWN
  PAUSE
}

enum VoteRole {
  STAFF
  VETERANS
}

enum SubmissionState {
  PROCESSING
  APPROVED
  REJECTED
  PAUSED
  DELETED
}

enum SubmissionLinkType {
  SOURCE
  OTHER
}

model Submission {
  id String @id @default(cuid())


  // Arrays because submissions need to be able to exist without
  // any of these relations having any data.
  // This is to facilitate message relation before submission registration.
  relatedMessages RelatedMessage[]
  votes           Vote[]
  links           SubmissionLink[]
  drafts          Draft[]


  // It might not exist, without circular dependencies, we cannot model
  // a schema where this is required.
  details SubmissionDetails?
}

model Draft {
  id String @id @default(cuid())

  timestamp DateTime @default(now())
  content   String

  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model RelatedMessage {
  messageId String @id

  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model Vote {
  voterId String
  type    VoteType
  role    VoteRole

  submissionId        String
  submission          Submission         @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  // Votes are identified by voter, submission and type
  // It is not disallowed to have an upvote and a downvote at the same time
  // Similarly, having votes alongside a pause is acceptable
  details             SubmissionDetails? @relation(fields: [submissionDetailsId], references: [submissionId])
  submissionDetailsId String?
  @@id([voterId, submissionId, type])
}

model SubmissionDetails {
  submissionId String     @id
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  messageId      String @unique
  reviewThreadId String @unique

  name        String
  description String
  techUsed    String
  state       SubmissionState
  authorId    String

  links SubmissionLink[]
  votes Vote[]
}

model SubmissionLink {
  id String @id @default(cuid())

  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  type SubmissionLinkType
  url  String

  details             SubmissionDetails? @relation(fields: [submissionDetailsId], references: [submissionId])
  submissionDetailsId String?
}
